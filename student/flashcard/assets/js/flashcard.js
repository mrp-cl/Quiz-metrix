// js/flashcards.js
class Flashcards {
    constructor() {
        this.cards = [
            {
                id: 1,
                title: "EVENT DRIVEN",
                front: "These exceptions are generated by Common Language Runtime (CLR)",
                back: "System exceptions",
                hint: "Think about the source of these exceptions"
            },
            {
                id: 2,
                title: "PROGRAMMING PARADIGM",
                front: "A programming paradigm where the flow of the program is determined by events",
                back: "Event-driven programming",
                hint: "Consider how user interactions affect program flow"
            },
            {
                id: 3,
                title: "DATA STRUCTURE",
                front: "A data structure that follows the Last In, First Out principle",
                back: "Stack",
                hint: "Think about how items are added and removed"
            },
            {
                id: 4,
                title: "ALGORITHM",
                front: "An algorithm that repeatedly divides a list into two halves",
                back: "Binary search",
                hint: "Consider how the search space is reduced"
            },
            {
                id: 5,
                title: "DATABASE",
                front: "A type of database that stores data in tables with rows and columns",
                back: "Relational database",
                hint: "Think about how data is organized"
            },
            {
                id: 6,
                title: "NETWORKING",
                front: "A protocol that ensures reliable data transmission over a network",
                back: "TCP (Transmission Control Protocol)",
                hint: "Consider how data packets are handled"
            },
            {
                id: 7,
                title: "SECURITY",
                front: "A method of verifying the integrity of data",
                back: "Hashing",
                hint: "Think about how data can be verified without revealing the original"
            },
            {
                id: 8,
                title: "WEB DEVELOPMENT",
                front: "A client-side scripting language used for web development",
                back: "JavaScript",
                hint: "Consider what runs in the browser"
            },
            {
                id: 9,
                title: "MOBILE DEVELOPMENT",
                front: "An operating system for mobile devices developed by Google",
                back: "Android",
                hint: "Think about smartphone platforms"
            },
            {
                id: 10,
                title: "CLOUD COMPUTING",
                front: "A service model that provides computing resources over the internet",
                back: "Infrastructure as a Service (IaaS)",
                hint: "Consider the level of abstraction provided"
            },
            {
                id: 11,
                title: "ARTIFICIAL INTELLIGENCE",
                front: "A type of machine learning where the system learns from labeled data",
                back: "Supervised learning",
                hint: "Think about how the system is trained"
            },
            {
                id: 12,
                title: "SOFTWARE ENGINEERING",
                front: "A software development methodology that emphasizes iterative development",
                back: "Agile",
                hint: "Consider how teams adapt to changes"
            },
            {
                id: 13,
                title: "OPERATING SYSTEMS",
                front: "A part of the operating system that manages memory allocation",
                back: "Memory manager",
                hint: "Think about resource management"
            },
            {
                id: 14,
                title: "COMPUTER ARCHITECTURE",
                front: "A component that performs arithmetic and logical operations",
                back: "Arithmetic Logic Unit (ALU)",
                hint: "Consider the core processing components"
            },
            {
                id: 15,
                title: "PROGRAMMING LANGUAGES",
                front: "A programming language feature that allows a class to inherit properties from another class",
                back: "Inheritance",
                hint: "Think about object-oriented programming concepts"
            },
            {
                id: 16,
                title: "SOFTWARE TESTING",
                front: "A testing approach that examines the functionality without knowledge of internal structure",
                back: "Black-box testing",
                hint: "Consider the tester's perspective"
            }
        ];
        
        this.currentIndex = 2; // Starting with the 3rd card (index 2) as shown in the image
        this.knownCards = [];
        this.stillLearningCards = [0]; // Assuming the first card is marked as "still learning"
        
        // Statistics
        this.totalCards = this.cards.length;
        this.knownCount = 1; // As shown in the image
        this.stillLearningCount = 1; // As shown in the image
    }
    
    getCurrentCard() {
        return this.cards[this.currentIndex];
    }
    
    nextCard() {
        if (this.currentIndex < this.totalCards - 1) {
            this.currentIndex++;
            return this.getCurrentCard();
        }
        return null;
    }
    
    prevCard() {
        if (this.currentIndex > 0) {
            this.currentIndex--;
            return this.getCurrentCard();
        }
        return null;
    }
    
    markAsKnown() {
        const cardId = this.getCurrentCard().id;
        
        // Remove from stillLearning if it's there
        const stillLearningIndex = this.stillLearningCards.indexOf(cardId);
        if (stillLearningIndex !== -1) {
            this.stillLearningCards.splice(stillLearningIndex, 1);
            this.stillLearningCount--;
        }
        
        // Add to known if not already there
        if (!this.knownCards.includes(cardId)) {
            this.knownCards.push(cardId);
            this.knownCount++;
        }
        
        return this.nextCard();
    }
    
    markAsStillLearning() {
        const cardId = this.getCurrentCard().id;
        
        // Remove from known if it's there
        const knownIndex = this.knownCards.indexOf(cardId);
        if (knownIndex !== -1) {
            this.knownCards.splice(knownIndex, 1);
            this.knownCount--;
        }
        
        // Add to stillLearning if not already there
        if (!this.stillLearningCards.includes(cardId)) {
            this.stillLearningCards.push(cardId);
            this.stillLearningCount++;
        }
        
        return this.nextCard();
    }
    
    shuffleCards() {
        // Fisher-Yates shuffle algorithm
        for (let i = this.cards.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [this.cards[i], this.cards[j]] = [this.cards[j], this.cards[i]];
        }
        this.currentIndex = 0;
        return this.getCurrentCard();
    }
    
    getHint() {
        return this.getCurrentCard().hint;
    }
}